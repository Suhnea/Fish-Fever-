# Электронный конспект
## Проект игры «Fish Fever!»

### Вопросы

#### №1. Особенности библиотеки Pygame, изученные в ходе работы над проектом:

1. **Инициализация и создание окна**:  
   Использование `pygame.init()` для инициализации библиотеки и `pygame.display.set_mode()` для создания игрового окна.
2. **Модуль `pygame.mixer`**:  
   Позволяет добавлять звуки и музыку и настраивать их воспроизведение.
3. **Работа с изображениями**:  
   Загрузка изображений с помощью `pygame.image.load()` и их отображение на экране с помощью `screen.blit()`.
4. **Работа с текстом**:  
   Использование `pygame.font.Font()` для создания шрифтов и `render()` для отображения текста на экране.
5. **Обработка событий**:  
   Использование `pygame.event.get()` для обработки событий, таких как нажатие клавиш и закрытие окна.
6. **Управление временем**:  
   Использование `pygame.time.Clock()` для контроля FPS и `pygame.time.get_ticks()` для измерения времени.
7. **Коллизии**:  
   Использование `rect.colliderect()` для проверки столкновений между объектами.

---

#### №2. Проект как структура в файловой системе на диске:

Проект представляет собой папку, содержащую:

1. Основной файл с кодом игры (например, `main.py`).
2. Изображения для фона, персонажей и объектов (например, `backgr.png`, `plenon.png`, `1.png` и т.д.).
3. Шрифты (например, `prstartk.ttf`).
4. Музыка и звуки (например, `Music.wav`, `High_Score.wav`).
5. Все ресурсы (изображения, шрифты) должны быть расположены в той же папке, что и основной файл, или в подпапках, чтобы их можно было легко загрузить в игре.

---

#### №3. Виртуальное окружение:

Виртуальное окружение — это изолированная среда для Python, которая позволяет управлять зависимостями проекта отдельно от глобальной установки Python.

- Виртуальное окружение создается с помощью команды:  
  ```bash
  python -m venv <имя_окружения>

Его нужно создавать в начале работы над проектом, чтобы избежать конфликтов версий библиотек и упростить управление зависимостями.

- После создания окружения его нужно активировать:
  На Linux/Mac:
  ```bash
  source <имя_окружения>/bin/activate

  На Windows:
  ```bash
  <имя_окружения>\Scripts\activate

- Установка необходимых библиотек:
  ```bash
  pip install pygame

---

### №4. Особенности использования среды разработки:

Для работы с Pygame подходят такие среды, как PyCharm, VS Code или Thonny. Они предоставляют удобные инструменты для отладки, автодополнения и управления проектом. Я использовала среду **VS Code**.

**Особенности VS Code:**

1. **Автодополнение для кода Python**:  
   Особенно полезно при изучении Pygame, так как предлагает подсказки для функций и методов.
2. **Запуск и тестирование игры прямо из редактора**:  
   Не нужно переключать приложения, что упрощает процесс разработки.
3. **Настраиваемый макет**:  
   Позволяет сосредоточиться на кодировании с возможностью разделения экранов и эффективной организации файлов.
4. **Быстрая итерация игровой механики и визуальных эффектов**:  
   Упрощает процесс разработки и тестирования.
5. **Сочетание мощных инструментов и удобного дизайна**:  
   Делает работу в VS Code комфортной и продуктивной.

---

### №5. Приоритеты структуры программного кода:

**Линейная последовательность создания игрового проекта:**

1. **Инициализация Pygame и создание окна**:  
   Настройка библиотеки и создание игрового окна.
2. **Загрузка ресурсов**:  
   Загрузка изображений, шрифтов и звуков.
3. **Создание основных переменных и объектов**:  
   Инициализация персонажа, врагов, фона и других элементов игры.

**Настройка игрового цикла:**

1. **Обработка событий**:  
   Обработка ввода пользователя (например, нажатие клавиш) и событий (например, закрытие окна).
2. **Обновление состояния игры**:  
   Движение объектов, проверка коллизий и обновление игровой логики.
3. **Отрисовка объектов на экране**:  
   Отображение фона, игрока и других элементов.
4. **Добавление дополнительных функций**:  
   Реализация подсчета очков, рестарта игры и других механик.

В данном проекте сначала инициализируется Pygame, затем загружаются ресурсы, создаются объекты и настраивается игровой цикл.

---

### №6. Назначение циклов, условий, данных, структур данных и функций:

1. **Циклы**:  
   Используются для непрерывного обновления состояния игры (например, основной игровой цикл `while True`).
2. **Условия**:  
   Используются для проверки событий (например, нажатие клавиш) и коллизий (например, столкновение героя с врагом).
3. **Данные**:  
   Хранят состояние игры (например, координаты объектов, флаги).
4. **Структуры данных**:  
   Например, `rect` используется для хранения позиции и размеров объектов.
5. **Функции**:  
   Упрощают код и делают его более читаемым (например, `display_score()` для отображения счета).

**Что можно изменить**:  
Можно добавить больше функций для разделения логики (например, отдельная функция для обработки коллизий).

---

# План дальнейших действий по изучению программирования на Python и разработке проектов:

---

## 1. Изучение Python:
- **Базовые концепции**:  
  Углубленное изучение типов данных, функций, классов и модулей.
- **Работа с библиотеками**:  
  Изучение других библиотек, таких как `pandas`, `matplotlib`.
- **ООП**:  
  Изучение объектно-ориентированного программирования для создания более сложных проектов.

---

## 2. Разработка игровых проектов:
### Улучшение текущего проекта:
- Добавление новых уровней.
- Улучшение графики и анимаций.

### Создание новых игр:
- Платформеры, головоломки, аркады.
- Использование более сложных механик (например, физика с помощью `pymunk`).

---

## 3. Изучение других технологий:
- **Веб-разработка**:  
  Изучение Flask/Django для создания веб-приложений.
- **Автоматизация**:  
  Создание скриптов для автоматизации рутинных задач.

---

## 4. Предложения к реализации:
- **Мультиплеерная игра**:  
  Добавление возможности игры по сети.
- **Мобильная игра**:  
  Портирование проекта на мобильные платформы с использованием Kivy.
- **Игра с ИИ**:  
  Добавление врагов с искусственным интеллектом.
